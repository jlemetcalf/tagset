name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Check compiler
      shell: bash
      run: c++ --version

    - name: Cache
      uses: actions/cache@v2
      env:
        cache-name: cache-conan-modules
      with:
        path: |
          ${{ env.CONAN_USER_HOME }}
          ~/.cache/pip
        key: ${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Install conan
      shell: bash
      run: |
        python3 -m pip install --upgrade pip setuptools
        python3 -m pip install conan
        source ~/.profile

    - name: Install gcovr
      shell: bash
      run: sudo apt install gcovr

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{runner.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source
      # and build directories, but this is only available with CMake 3.13 and higher.
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      #
      # We need to source the profile file to make sure conan is in PATH
      run: |
        source ~/.profile
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -D ENABLE_COVERAGE:BOOL=TRUE

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE

    - name: Check coverage files produced
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: find . -name *.gcda -print

    - name: Generate Coverage Report
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: gcovr -j ${{env.nproc}} --delete --root ${{runner.workspace}} --print-summary --xml-pretty --xml coverage.xml . --gcov-executable 'gcov' -v

    - uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ${{runner.workspace}}/build
        files: ./coverage.xml
        verbose: true

    # - name: Coverage
    #   working-directory: ${{runner.workspace}}
    #   shell: bash
    #   run: bash <(curl -s https://codecov.io/bash) -x /usr/bin/gcov -t ${{ secrets.CODECOV_TOKEN }}
